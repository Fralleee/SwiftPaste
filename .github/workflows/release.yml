name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Next version"
        required: true
        default: 0.1.0

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      EXTENSION_ID: ocamjpjndljkgcoeadplclcoiepjicgj
      NEXT_VERSION: ${{ needs.validate-version.outputs.version }}
    outputs:
      version: ${{ steps.validate-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine last found tag
        id: last-tag
        run: |
          if [[ $(git tag) ]]; then
            latestTag=$(git describe --tags $(git rev-list --tags --max-count=1))
          else
            latestTag="0.0.0"
          fi
          echo "tag=$latestTag" >> $GITHUB_ENV

      - name: Validate version
        id: validate-version
        run: |
          latestTag="${{ env.tag }}"
          echo "Latest Tag: $latestTag"
          echo "Input version: ${{ github.event.inputs.version }}"

          latestTag=${latestTag}
          inputVersion=${{ github.event.inputs.version }}

          IFS='.' read -ra VERSION_PARTS <<< "$latestTag"

          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}

          nextVersion="$major.$minor.$((patch + 1))"

          if [[ "$inputVersion" > "$latestTag" ]]; then
            nextVersion="$inputVersion"
          fi

          echo "version=$nextVersion" >> $GITHUB_OUTPUT
          echo "version=$nextVersion" >> $GITHUB_ENV

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Install dependencies
      #   run: npm install --legacy-peer-deps

      # - name: Run tests
      #   run: npm test

      # - name: Build extension
      #   run: npm run build

      # - name: Bump version of compiled manifest.json
      #   run: node scripts/updateManifestVersion.js ${{ env.version }} dist/manifest.json

      # - name: Zip the extension
      #   run: zip -r chrome-extension.zip dist

      # - name: Install webstore cli
      #   run: npm install -g chrome-webstore-upload-cli

      # - name: Upload to web store
      #   run: chrome-webstore-upload upload --source chrome-extension.zip --extension-id ${{ env.EXTENSION_ID }} --client-id ${{ secrets.CHROME_CLIENT_ID }} --client-secret ${{ secrets.CHROME_CLIENT_SECRET }} --refresh-token ${{ secrets.CHROME_REFRESH_TOKEN }}

  release:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    env:
      NEXT_VERSION: ${{ needs.build-and-deploy.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get commit messages
        id: get-commit-messages
        run: |
          messages=$(git log $(git describe --tags $(git rev-list --tags --max-count=1))..HEAD --pretty=format:'%s' | tr '\n' ' ')
          echo "body=$messages" >> $GITHUB_ENV

      # - name: Create GitHub Release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.NEXT_VERSION }}
      #     release_name: Release ${{ env.NEXT_VERSION }}
      #     body: ${{ steps.get-commit-messages.outputs.messages }}
      #     draft: false
      #     prerelease: false
