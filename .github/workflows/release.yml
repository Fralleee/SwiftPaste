name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Next version"
        required: true
        default: v0.1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      EXTENSION_ID: ocamjpjndljkgcoeadplclcoiepjicgj
      NEXT_VERSION: ${{ needs.validate-version.outputs.version }}
    outputs:
      version: ${{ steps.validate-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine last found tag
        id: last-tag
        run: |
          if [[ $(git tag) ]]; then
            latestTag=$(git describe --tags $(git rev-list --tags --max-count=1))
          else
            latestTag=""
          fi
          echo "tag=$latestTag" >> $GITHUB_OUTPUT

      - name: Validate version
        id: validate-version
        run: |
          latestTag="${{ steps.last-tag.outputs.tag }}"
          echo "Latest Tag: $latestTag"

          echo "Validated version ${{ github.event.inputs.version }}"

          version="${{ github.event.inputs.version }}"

          if [[ "$latestTag" && "$version" < "$latestTag" ]]; then
            echo "The provided version is older than the latest tag."
            echo "Using the latest tag version and incrementing it for the release."
            nextVersion=$(python -c "import re; m = re.match(r'(\d+\.\d+)', '$latestTag'); v = float(m.group(1)); print('{:.1f}'.format(v + 0.1))")
          else
            nextVersion="${{ github.event.inputs.version }}"
          fi

          echo "version=$nextVersion" >> $GITHUB_ENV

      # - name: Checkout
      #   uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Install dependencies
      #   run: npm install

      # - name: Run tests
      #   run: npm test

      # - name: Build extension
      #   run: npm run build

      # - name: Bump version of compiled manifest.json
      #   run: node scripts/updateManifestVersion.js ${{ env.NEXT_VERSION }} dist/manifest.json

      # - name: Zip the extension
      #   run: zip -r chrome-extension.zip dist

      # - name: Install webstore cli
      #   run: npm install -g chrome-webstore-upload-cli

      # - name: Upload to web store
      #   run: chrome-webstore-upload upload --source chrome-extension.zip --extension-id ${{ env.EXTENSION_ID }} --client-id ${{ secrets.CHROME_CLIENT_ID }} --client-secret ${{ secrets.CHROME_CLIENT_SECRET }} --refresh-token ${{ secrets.CHROME_REFRESH_TOKEN }}

  release:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    env:
      NEXT_VERSION: ${{ needs.build-and-deploy.outputs.version }}
    steps:
      - name: Log version
        run: echo "Validated version ${{ env.NEXT_VERSION }}"

      # - name: Checkout
      #   uses: actions/checkout@v3

      # - name: Setup Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Create GitHub Release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.NEXT_VERSION }}
      #     release_name: Release ${{ env.NEXT_VERSION }}
      #     body: |
      #       Release ${{ env.NEXT_VERSION }}
      #       Add release notes or description here
      #     draft: false
      #     prerelease: false
